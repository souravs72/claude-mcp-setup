# ==============================================================================
# MCP SERVERS CONFIGURATION TEMPLATE
# ==============================================================================
# Copy this file to .env and fill in your actual values:
#   cp .env.template .env
#
# Then edit .env with your actual credentials
# NEVER commit your .env file to version control!
# ==============================================================================

# ==============================================================================
# POSTGRESQL DATABASE (Docker - Required for Goal Agent)
# ==============================================================================
# PostgreSQL runs in Docker via docker-compose.yml
# Start with: docker compose up -d
# Initialize with: python scripts/init_database.py

POSTGRES_HOST=localhost
POSTGRES_PORT=5433
POSTGRES_DB=mcp_goals
POSTGRES_USER=postgres
POSTGRES_PASSWORD=change_this_password_in_production
POSTGRES_POOL_SIZE=10
POSTGRES_MAX_OVERFLOW=20
POSTGRES_SSL_MODE=disable

# ==============================================================================
# REDIS CACHE (Docker - Optional, for performance)
# ==============================================================================
# Redis runs in Docker via docker-compose.yml
# Used only for temporary caching (5-minute TTL)
# The system works without Redis, just slightly slower

REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=
REDIS_DECODE_RESPONSES=true
REDIS_SOCKET_TIMEOUT=5
REDIS_SOCKET_CONNECT_TIMEOUT=5
REDIS_MAX_CONNECTIONS=50
REDIS_RETRY_ON_TIMEOUT=true
REDIS_HEALTH_CHECK_INTERVAL=30

# Cache configuration
CACHE_ENABLED=true
CACHE_SERVER_URL=http://localhost:8001
CACHE_SERVER_TIMEOUT=5

# ==============================================================================
# GOAL AGENT CONFIGURATION
# ==============================================================================
GOAL_AGENT_MAX_WORKERS=5
GOAL_AGENT_TIMEOUT=30

# ==============================================================================
# GITHUB INTEGRATION (Optional)
# ==============================================================================
# Generate token at: https://github.com/settings/tokens
# Required scopes: repo, read:org
# Token format: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

GITHUB_PERSONAL_ACCESS_TOKEN=
GITHUB_TIMEOUT=30
GITHUB_MAX_RETRIES=3
GITHUB_DEFAULT_BRANCH=main

# ==============================================================================
# JIRA INTEGRATION (Optional)
# ==============================================================================
# Base URL: Your Jira Cloud instance URL
# API Token: Generate at https://id.atlassian.com/manage-profile/security/api-tokens
# Email: Your Atlassian account email
# Project Key: Your Jira project key (e.g., PROJ, DEV, etc.)

JIRA_BASE_URL=
JIRA_EMAIL=
JIRA_API_TOKEN=
JIRA_PROJECT_KEY=
JIRA_TIMEOUT=30
JIRA_MAX_RETRIES=3
JIRA_RATE_LIMIT_DELAY=0.5

# ==============================================================================
# FRAPPE/ERPNEXT INTEGRATION (Optional)
# ==============================================================================
# Site URL: Your Frappe/ERPNext instance URL
# API Key & Secret: Generate from Frappe User Settings > API Access

FRAPPE_SITE_URL=
FRAPPE_API_KEY=
FRAPPE_API_SECRET=
FRAPPE_TIMEOUT=30
FRAPPE_MAX_RETRIES=3
FRAPPE_POOL_CONNECTIONS=5
FRAPPE_POOL_MAXSIZE=10

# ==============================================================================
# GOOGLE SEARCH API (Optional - for Internet Server)
# ==============================================================================
# API Key: Create at https://console.cloud.google.com/
# Search Engine ID: Create at https://cse.google.com/
# Instructions: See CONFIGURATION.md for detailed setup

GOOGLE_API_KEY=
GOOGLE_SEARCH_ENGINE_ID=
GOOGLE_TIMEOUT=15
GOOGLE_MAX_RETRIES=3

# ==============================================================================
# SETUP INSTRUCTIONS
# ==============================================================================
#
# 1. Copy this template:
#    cp .env.template .env
#
# 2. Start Docker containers:
#    docker compose up -d
#
# 3. Initialize PostgreSQL database:
#    source mcp-env/bin/activate
#    python scripts/init_database.py
#
# 4. Verify setup:
#    make test-db
#    docker compose ps
#
# 5. Start MCP servers:
#    mcpctl run
#
# ==============================================================================
# QUICK REFERENCE
# ==============================================================================
#
# PostgreSQL:
#   - Host Port: 5433 (to avoid conflicts with local PostgreSQL)
#   - Container Port: 5432
#   - Database: mcp_goals
#   - Used for: Persistent storage of goals and tasks
#
# Redis:
#   - Port: 6379
#   - Used for: Optional caching (5-minute TTL)
#   - System works without it (just slower)
#
# Documentation:
#   - DOCKER_QUICKSTART.md - Quick reference
#   - DOCKER_SETUP.md - Complete Docker guide
#   - SETUP_POSTGRES.md - PostgreSQL details
#   - CONFIGURATION.md - All configuration options
#
# ==============================================================================
