# =============================================================================
# MCP SERVERS ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env and fill in your actual values
# Never commit .env to version control!
#
# Usage:
#   cp .env.example .env
#   nano .env  # Edit with your values
# =============================================================================

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Control logging behavior across all servers

# File log level (what gets written to log files)
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Console log level (what gets printed to stderr)
# Recommended: ERROR or CRITICAL for production to reduce noise
LOG_LEVEL_CONSOLE=ERROR

# Directory for log files (relative to project root)
LOG_DIR=logs

# Maximum size of each log file before rotation (in bytes)
# Default: 10485760 (10 MB)
LOG_MAX_BYTES=10485760

# Number of backup log files to keep
LOG_BACKUP_COUNT=5

# Use colored output in console (useful for development)
# Options: true, false
LOG_USE_COLORS=false

# =============================================================================
# INTERNET/SEARCH SERVER CONFIGURATION
# =============================================================================
# Google Custom Search API credentials
# Get your API key: https://developers.google.com/custom-search/v1/overview
# Create search engine: https://programmablesearchengine.google.com/

GOOGLE_API_KEY=
GOOGLE_SEARCH_ENGINE_ID=

# Request timeout in seconds
GOOGLE_TIMEOUT=15

# Maximum retry attempts for failed requests
GOOGLE_MAX_RETRIES=3

# Connection pool settings
GOOGLE_POOL_CONNECTIONS=5
GOOGLE_POOL_MAXSIZE=10

# Thread pool for concurrent operations (1-20)
# Higher values allow more parallel web fetches
INTERNET_MAX_WORKERS=5

# =============================================================================
# GITHUB SERVER CONFIGURATION
# =============================================================================
# GitHub Personal Access Token
# Create token: https://github.com/settings/tokens
# Required scopes: repo, read:org, read:user

GITHUB_PERSONAL_ACCESS_TOKEN=

# Branch Configuration
GITHUB_DEFAULT_BRANCH=main

# Request timeout in seconds
GITHUB_TIMEOUT=30

# Maximum retry attempts
GITHUB_MAX_RETRIES=3

# Connection pool settings
GITHUB_POOL_CONNECTIONS=5
GITHUB_POOL_MAXSIZE=10

# =============================================================================
# FRAPPE/ERPNEXT SERVER CONFIGURATION
# =============================================================================
# Frappe site URL (no trailing slash)
# Example: http://127.0.0.1:8005 or https://your-site.frappe.cloud

FRAPPE_SITE_URL=

# API credentials
# Generate in Frappe: Settings > API > Generate Keys
FRAPPE_API_KEY=
FRAPPE_API_SECRET=

# Request timeout in seconds
FRAPPE_TIMEOUT=30

# Maximum retry attempts
FRAPPE_MAX_RETRIES=3

# Connection pool settings
FRAPPE_POOL_CONNECTIONS=5
FRAPPE_POOL_MAXSIZE=10

# =============================================================================
# JIRA SERVER CONFIGURATION
# =============================================================================
# Jira Cloud instance URL (must use HTTPS, no trailing slash)
# Example: https://your-domain.atlassian.net

JIRA_BASE_URL=

# Jira account email
JIRA_EMAIL=

# Jira API token
# Create token: https://id.atlassian.com/manage-profile/security/api-tokens
JIRA_API_TOKEN=

# Default project key (optional, can be overridden per request)
JIRA_PROJECT_KEY=

# Rate limiting delay between requests (seconds)
# Increase if hitting rate limits
JIRA_RATE_LIMIT_DELAY=0.5

# Request timeout in seconds
JIRA_TIMEOUT=30

# Maximum retry attempts
JIRA_MAX_RETRIES=3

# Connection pool settings
JIRA_POOL_CONNECTIONS=5
JIRA_POOL_MAXSIZE=10

# =============================================================================
# REDIS/MEMORY CACHE SERVER CONFIGURATION
# =============================================================================
# Redis connection settings

# Redis host
REDIS_HOST=localhost

# Redis port
REDIS_PORT=6379

# Redis database number (0-15)
REDIS_DB=0

# Redis password (leave empty if no password)
REDIS_PASSWORD=

# Decode responses as strings (recommended: true)
# Options: true, false
REDIS_DECODE_RESPONSES=true

# Socket timeout in seconds
REDIS_SOCKET_TIMEOUT=5

# Socket connection timeout in seconds
REDIS_SOCKET_CONNECT_TIMEOUT=5

# Maximum number of connections in the pool
# Increase for high-traffic scenarios
REDIS_MAX_CONNECTIONS=50

# Retry on timeout (recommended: true)
# Options: true, false
REDIS_RETRY_ON_TIMEOUT=true

# Health check interval in seconds
# Set to 0 to disable health checks
REDIS_HEALTH_CHECK_INTERVAL=30

# =============================================================================
# GOAL AGENT SERVER CONFIGURATION
# =============================================================================
# Goal-based AI agent settings

# Thread pool size for concurrent task processing (1-20)
# Higher values allow more parallel operations
# Recommended: 5-10 for most use cases
GOAL_AGENT_MAX_WORKERS=5

# Cache server URL (for state persistence)
# Should point to your memory cache server
CACHE_SERVER_URL=http://localhost:8001

# Enable cache integration (recommended: true)
# Options: true, false
CACHE_ENABLED=true

# Request timeout in seconds
GOAL_AGENT_TIMEOUT=30

# =============================================================================
# BRAVE SEARCH API (Optional - if using Brave instead of Google)
# =============================================================================
# Brave Search API key
# Get your API key: https://brave.com/search/api/

BRAVE_API_KEY=

# =============================================================================
# PRODUCTION RECOMMENDATIONS
# =============================================================================
#
# For production environments, consider these settings:
#
# Logging:
#   LOG_LEVEL=WARNING
#   LOG_LEVEL_CONSOLE=ERROR
#   LOG_USE_COLORS=false
#   LOG_MAX_BYTES=52428800  # 50 MB
#   LOG_BACKUP_COUNT=10
#
# High Traffic:
#   FRAPPE_POOL_CONNECTIONS=15
#   FRAPPE_POOL_MAXSIZE=30
#   GITHUB_POOL_CONNECTIONS=15
#   GITHUB_POOL_MAXSIZE=30
#   JIRA_POOL_CONNECTIONS=10
#   JIRA_POOL_MAXSIZE=20
#   GOOGLE_POOL_CONNECTIONS=10
#   GOOGLE_POOL_MAXSIZE=20
#   REDIS_MAX_CONNECTIONS=100
#   GOAL_AGENT_MAX_WORKERS=15
#   INTERNET_MAX_WORKERS=10
#
# Low Resources:
#   FRAPPE_POOL_CONNECTIONS=2
#   FRAPPE_POOL_MAXSIZE=5
#   GITHUB_POOL_CONNECTIONS=2
#   GITHUB_POOL_MAXSIZE=5
#   JIRA_POOL_CONNECTIONS=2
#   JIRA_POOL_MAXSIZE=5
#   GOOGLE_POOL_CONNECTIONS=2
#   GOOGLE_POOL_MAXSIZE=5
#   REDIS_MAX_CONNECTIONS=20
#   GOAL_AGENT_MAX_WORKERS=2
#   INTERNET_MAX_WORKERS=2
#
# =============================================================================
# DEVELOPMENT RECOMMENDATIONS
# =============================================================================
#
# For development/debugging:
#
#   LOG_LEVEL=DEBUG
#   LOG_LEVEL_CONSOLE=INFO
#   LOG_USE_COLORS=true
#   FRAPPE_POOL_CONNECTIONS=2
#   FRAPPE_POOL_MAXSIZE=5
#   GOAL_AGENT_MAX_WORKERS=3
#   INTERNET_MAX_WORKERS=3
#
# =============================================================================
# SECURITY NOTES
# =============================================================================
#
# 1. Never commit .env to version control
# 2. Add .env to your .gitignore file
# 3. Rotate API keys and tokens regularly
# 4. Use environment-specific .env files:
#    - .env.development
#    - .env.staging
#    - .env.production
# 5. Use strong, unique passwords for Redis if exposed
# 6. Enable Redis authentication in production:
#    - Set REDIS_PASSWORD
#    - Configure redis.conf with requirepass
# 7. Use HTTPS for all external API endpoints
# 8. Limit API token permissions to minimum required scope
#
# =============================================================================