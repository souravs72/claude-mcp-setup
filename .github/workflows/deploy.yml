name: Build and Deploy MCP Servers

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        server:
          - memory-cache
          - goal-agent
          - github
          - jira
          - internet

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.server }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cloud/docker/Dockerfile.${{ matrix.server }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: mcp_goals
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: mcp_goals
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          python scripts/init_database.py
          pytest tests/ -v --cov=servers --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/dev'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Check if EKS cluster exists
        id: check-cluster
        run: |
          if aws eks describe-cluster --name mcp-servers-staging --region ap-south-1 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  EKS cluster 'mcp-servers-staging' does not exist yet"
            echo "Run Terraform first: cd cloud/terraform && terraform apply"
          fi

      - name: Update kubeconfig
        if: steps.check-cluster.outputs.exists == 'true'
        run: |
          aws eks update-kubeconfig --name mcp-servers-staging --region ap-south-1

      - name: Deploy with Helm
        if: steps.check-cluster.outputs.exists == 'true'
        run: |
          helm upgrade --install mcp-servers ./cloud/helm/mcp-servers \
            --namespace mcp-servers \
            --create-namespace \
            --set global.imageTag=${{ github.sha }} \
            --set secrets.githubToken=${{ secrets.GH_TOKEN_STAGING }} \
            --set secrets.jiraApiToken=${{ secrets.JIRA_API_TOKEN }} \
            --set secrets.googleApiKey=${{ secrets.GOOGLE_API_KEY }} \
            --wait

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Check if EKS cluster exists
        id: check-cluster
        run: |
          if aws eks describe-cluster --name mcp-servers-production --region ap-south-1 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  EKS cluster 'mcp-servers-production' does not exist yet"
            echo "üìö See documentation: https://github.com/souravs72/claude-mcp-setup/blob/main/cloud/SETUP_INSTRUCTIONS.md"
            echo "üöÄ Deploy infrastructure first with Terraform"
          fi

      - name: Update kubeconfig
        if: steps.check-cluster.outputs.exists == 'true'
        run: |
          aws eks update-kubeconfig --name mcp-servers-production --region ap-south-1

      - name: Deploy with Helm
        if: steps.check-cluster.outputs.exists == 'true'
        run: |
          helm upgrade --install mcp-servers ./cloud/helm/mcp-servers \
            --namespace mcp-servers \
            --create-namespace \
            --set global.imageTag=${{ github.sha }} \
            --set secrets.githubToken=${{ secrets.GH_TOKEN_PROD }} \
            --set secrets.jiraApiToken=${{ secrets.JIRA_API_TOKEN }} \
            --set secrets.googleApiKey=${{ secrets.GOOGLE_API_KEY }} \
            --set secrets.googleSearchEngineId=${{ secrets.GOOGLE_SEARCH_ENGINE_ID }} \
            --wait \
            --timeout 10m

      - name: Verify deployment
        if: steps.check-cluster.outputs.exists == 'true'
        run: |
          kubectl rollout status deployment/memory-cache-server -n mcp-servers
          kubectl rollout status deployment/goal-agent-server -n mcp-servers
          kubectl rollout status deployment/github-server -n mcp-servers
          kubectl rollout status deployment/jira-server -n mcp-servers
          kubectl rollout status deployment/internet-server -n mcp-servers

      - name: Run smoke tests
        if: steps.check-cluster.outputs.exists == 'true'
        run: |
          kubectl run smoke-test --rm -i --restart=Never \
            --image=curlimages/curl:latest -- \
            curl -f http://memory-cache-service:8001/health
